<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XmasEngineModel</name>
    </assembly>
    <members>
        <member name="T:XmasEngineModel.Conversion.XmasConversionTool">
            <summary>
            Basic conversion tool from objects to XmasObjects and vice versa
            </summary>
        </member>
        <member name="T:XmasEngineModel.Conversion.XmasConversionTool`1">
            <summary>
            Conversion tool for objects of a certain type to XmasObject and vice versa
            </summary>
            <typeparam name="ForeignType"></typeparam>
        </member>
        <member name="M:XmasEngineModel.Conversion.XmasConversionTool`1.#ctor">
            <summary>
            Instantiates a XmasConversionTool, used to convert objects
            </summary>
        </member>
        <member name="M:XmasEngineModel.Conversion.XmasConversionTool`1.AddConverter``2(XmasEngineModel.Conversion.XmasConverter{``0,``1})">
            <summary>
            Adds a converter meant to be used by the converter for converting objects
            </summary>
            <typeparam name="XmasType">The Xmas type the converter will convert the foreign object to and from</typeparam>
            <typeparam name="ForeignTyped">The Foreign type the converter will convert the Xmas object to and from</typeparam>
            <param name="converter">The converter that is added to the tool</param>
        </member>
        <member name="M:XmasEngineModel.Conversion.XmasConversionTool`1.ConvertToForeign(XmasEngineModel.XmasObject)">
            <summary>
            Converts the XmasObject into the an object with the tool's Foreign type
            </summary>
            <param name="gobj">XmasObject to be converted</param>
            <exception cref="T:XmasEngineModel.Exceptions.UnconvertableException">Is thrown if conversion was not possible</exception>
            <returns>The object that the XmasObject is converted into</returns>
        </member>
        <member name="M:XmasEngineModel.Conversion.XmasConversionTool`1.ConvertToXmas(`0)">
            <summary>
            Converts the Foreign object into an XmasObject
            </summary>
            <param name="foreign">The foreign object to be converted</param>
            <exception cref="T:XmasEngineModel.Exceptions.UnconvertableException">Is thrown if conversion was not possible</exception>
            <returns>The XmasObject the foreign object is converted into</returns>
        </member>
        <member name="T:XmasEngineModel.Conversion.XmasConverter`2">
            <summary>
            An abstract converter meant to be implemented into actual converters
            </summary>
            <typeparam name="XmasType">The XmasObject tyoe that the converter will convert foreign objects to and from</typeparam>
            <typeparam name="ForeignType">The foreign object type that the converter will convert XmasObjects to and from</typeparam>
        </member>
        <member name="M:XmasEngineModel.Conversion.XmasConverter`2.BeginConversionToXmas(`1)">
            <summary>
            This method is called when the converter is asked by the converter tool to convert a foreign object into a XmasObject 
            </summary>
            <param name="fobj">The foreign object to be converted</param>
            <returns>The Xmas object that the foreign object was converted into</returns>
        </member>
        <member name="M:XmasEngineModel.Conversion.XmasConverter`2.BeginConversionToForeign(`0)">
            <summary>
            This method is called when the converter is asked by the converter tool to convert a Xmas object into a foreign object  
            </summary>
            <param name="gobj">The Xmas object to be converted</param>
            <returns>The foreign object that the Xmas object was converted into</returns>
        </member>
        <member name="M:XmasEngineModel.Conversion.XmasConverter`2.ConvertToForeign(XmasEngineModel.XmasObject)">
            <summary>
            Requests the conversion of an XmasObject into an object, only if the ConversionTool the converter is added to is this possible.
            </summary>
            <exception cref="!:UnconvertableException">Is thrown if conversion was not possible</exception>
            <param name="gobj">The XmasObject to be converted</param>
            <returns>The object the XmasObject was converted into</returns>
        </member>
        <member name="M:XmasEngineModel.Conversion.XmasConverter`2.ConvertToXmas(`1)">
            <summary>
            Requests the conversion of an object into an XmasObject, only if the ConversionTool the converter is added to is this possible.
            </summary>
            <exception cref="!:UnconvertableException">Is thrown if conversion was not possible</exception>
            <param name="fobj">The object to be converted</param>
            <returns>The XmasObject the object was converted into</returns>
        </member>
        <member name="T:XmasEngineModel.Conversion.XmasConverterToForeign`2">
            <summary>
            Converter designed only for converting from a Xmas type to a foreign type
            </summary>
            <typeparam name="XmasType">The Xmas type that is to be converted into a foreign type</typeparam>
            <typeparam name="ForeignType">The foreign type that the Xmas type is to be converted into</typeparam>
        </member>
        <member name="T:XmasEngineModel.Conversion.XmasConverterToXmas`2">
            <summary>
            Converter designed only for converting from a foreign type to a Xmas type
            </summary>
            <typeparam name="XmasType">The Xmas type that the foreign type is to be converted into</typeparam>
            <typeparam name="ForeignType">The foreign type that is to be converted into a Xmas type</typeparam>
        </member>
        <member name="T:XmasEngineModel.EntityLib.Module.EntityModule">
            <summary>
            The core module type all modules should be extended from
            </summary>
        </member>
        <member name="T:XmasEngineModel.XmasActor">
            <summary>
            All XmasActors are meant as objects that does things with the engine.
            </summary>
        </member>
        <member name="T:XmasEngineModel.XmasObject">
            <summary>
            The most basic form of an object used by the engine
            </summary>
        </member>
        <member name="P:XmasEngineModel.XmasObject.Id">
            <summary>
            The id of the object, this is given to the object by the engine
            </summary>
        </member>
        <member name="M:XmasEngineModel.XmasActor.WorldAs``1">
            <summary>
            Gets the world in form of one of it's extended types
            </summary>
            <typeparam name="TWorld">The type the world is extended to</typeparam>
            <returns>The world</returns>
            <exception cref="T:XmasEngineModel.Exceptions.PropertyIsNullException"></exception>
        </member>
        <member name="M:XmasEngineModel.XmasActor.FactoryAs``1">
            <summary>
            Gets the factory in form of one of it's extended types
            </summary>
            <typeparam name="TFactory">The type the factory is extended to</typeparam>
            <returns>the factory</returns>
            <exception cref="T:XmasEngineModel.Exceptions.PropertyIsNullException"></exception>
        </member>
        <member name="M:XmasEngineModel.XmasActor.EventManagerAs``1">
            <summary>
             Gets the EventManager in form of one of it's extended types
            </summary>
            <typeparam name="TEvtman">The type the factory is extended to</typeparam>
            <returns>The EventManager</returns>
            <exception cref="T:XmasEngineModel.Exceptions.PropertyIsNullException"></exception>
        </member>
        <member name="M:XmasEngineModel.XmasActor.ActionManagerAs``1">
            <summary>
            Gets the ActionManager in form of one of it's extended types
            </summary>
            <typeparam name="TActman">The type the ActionManager is extended to</typeparam>
            <returns>the ActionManager</returns>
            <exception cref="T:XmasEngineModel.Exceptions.PropertyIsNullException"></exception>
        </member>
        <member name="P:XmasEngineModel.XmasActor.World">
            <summary>
            Gets the world of the engine the Xmas actor is currently part of
            </summary>
            <exception cref="T:XmasEngineModel.Exceptions.PropertyIsNullException"></exception>
        </member>
        <member name="P:XmasEngineModel.XmasActor.Factory">
            <summary>
            Gets or sets the factory
            </summary>
            <exception cref="T:XmasEngineModel.Exceptions.PropertyIsNullException"></exception>
        </member>
        <member name="P:XmasEngineModel.XmasActor.EventManager">
            <summary>
            Gets or sets the EventManager of the engine
            </summary>
            <exception cref="T:XmasEngineModel.Exceptions.PropertyIsNullException"></exception>
        </member>
        <member name="P:XmasEngineModel.XmasActor.ActionManager">
            <summary>
            Gets or sets the ActionManager of the engine
            </summary>
            <exception cref="T:XmasEngineModel.Exceptions.PropertyIsNullException"></exception>
        </member>
        <member name="M:XmasEngineModel.EntityLib.Module.EntityModule.AttachToEntity(XmasEngineModel.EntityLib.XmasEntity,XmasEngineModel.EntityLib.Module.EntityModule)">
            <summary>
            Attaches the module to an entity
            </summary>
            <param name="entityHost">The entity host the module is attached to</param>
            <param name="replacedModule">The module that the new module replaces, is null if no module was replaced</param>
        </member>
        <member name="M:XmasEngineModel.EntityLib.Module.EntityModule.DetachFromEntity">
            <summary>
            Detaches the module from its host entity.
            </summary>
        </member>
        <member name="P:XmasEngineModel.EntityLib.Module.EntityModule.EntityHost">
            <summary>
            Gets the entity hosting the module
            </summary>
        </member>
        <member name="P:XmasEngineModel.EntityLib.Module.EntityModule.ModuleType">
            <summary>
            Gets the module type, this method is meant to be overriden by other modules that wishes to disguise itself as another type
            </summary>
        </member>
        <member name="P:XmasEngineModel.EntityLib.Module.EntityModule.Percepts">
            <summary>
            Gets all percepts of the module, this method should be overriden to provide the actual percepts
            </summary>
        </member>
        <member name="P:XmasEngineModel.EntityLib.Module.EntityModule.ActionManager">
            <summary>
            Gets the ActionManager of its entity host
            </summary>
        </member>
        <member name="P:XmasEngineModel.EntityLib.Module.EntityModule.EventManager">
            <summary>
            Gets the EventManager of its entity host
            </summary>
        </member>
        <member name="P:XmasEngineModel.EntityLib.Module.EntityModule.Factory">
            <summary>
            Gets the Factory of its entity host
            </summary>
        </member>
        <member name="P:XmasEngineModel.EntityLib.Module.EntityModule.World">
            <summary>
            Gets the world of its entitiy host
            </summary>
        </member>
        <member name="T:XmasEngineModel.EntityLib.Module.PositionModule">
            <summary>
            A module for giving the entity a Position percept
            </summary>
        </member>
        <member name="T:XmasEngineModel.EntityLib.Module.RuleBasedModule`1">
            <summary>
            An abstract module for adding heirachel rules to an entity
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:XmasEngineModel.EntityLib.Module.RuleBasedModule`1.AddRule(System.Type,System.Predicate{`0},XmasEngineModel.Rule.Conclusion)">
            <summary>
            Adds a rule to a certain layer in the rule hierachy, with the rule is added a conclusion that is reached if the rule is ever true
            </summary>
            <param name="toLayer">The layer in the rule hierachy that the rule is added to</param>
            <param name="rule">The rule that is added to the certain layer</param>
            <param name="conclusion">The conclusion that is reached if its rule is ever true</param>
        </member>
        <member name="M:XmasEngineModel.EntityLib.Module.RuleBasedModule`1.PushRuleLayer(System.Type)">
            <summary>
            Adds a new layer to the Rule hierachy, the new layer supercedes all prioer layers
            </summary>
            <param name="layer">The layer inform of a type</param>
        </member>
        <member name="T:XmasEngineModel.EntityLib.Agent">
            <summary>
                 An agent meant to be added to a XmasWorld and controlled by an AI
            </summary>
        </member>
        <member name="T:XmasEngineModel.EntityLib.XmasEntity">
            <summary>
                 An Entity meant to be added to a XmasWorld
            </summary>
        </member>
        <member name="M:XmasEngineModel.EntityLib.XmasEntity.OnLoad">
            <summary>
            This method is called when the entity is first loaded into the engine, will only be called once.
            </summary>
        </member>
        <member name="M:XmasEngineModel.EntityLib.XmasEntity.OnEnterWorld">
            <summary>
            This method is called every time the entity enters the world
            </summary>
        </member>
        <member name="M:XmasEngineModel.EntityLib.XmasEntity.OnLeaveWorld">
            <summary>
            This method is called every time the entity leaves the world
            </summary>
        </member>
        <member name="M:XmasEngineModel.EntityLib.XmasEntity.HasModule``1">
            <summary>
            Checks if the entity has the given module registered
            </summary>
            <typeparam name="TModule">The module that is checked</typeparam>
            <returns>Whether or not the module is registered</returns>
        </member>
        <member name="M:XmasEngineModel.EntityLib.XmasEntity.Module``1">
            <summary>
            Gets the module requested by type
            </summary>
            <typeparam name="TModule">Type of the requested module</typeparam>
            <returns>the requsted module</returns>
        </member>
        <member name="M:XmasEngineModel.EntityLib.XmasEntity.ModuleAs``2">
            <summary>
            Gets the module requested by type and returns it as another type
            </summary>
            <typeparam name="TModule">Type of the requsted module</typeparam>
            <typeparam name="TAlias">The type the module is returned as</typeparam>
            <returns>The the requested module in the form of an alias</returns>
        </member>
        <member name="M:XmasEngineModel.EntityLib.XmasEntity.RegisterModule(XmasEngineModel.EntityLib.Module.EntityModule)">
            <summary>
            Registers a module to an entity, if an entity already has the module attached it will override the old module and return it.
            </summary>
            <param name="module">The module to be added to the entity</param>
            <returns>The old module</returns>
        </member>
        <member name="M:XmasEngineModel.EntityLib.XmasEntity.DeregisterModule(XmasEngineModel.EntityLib.Module.EntityModule)">
            <summary>
            Removes the module from the entity, if the module had an older version that module is restored.
            </summary>
            <param name="module">The module to be removed from the entity's modules</param>
        </member>
        <member name="M:XmasEngineModel.EntityLib.XmasEntity.Register(XmasEngineModel.Management.Trigger)">
            <summary>
            Registers a trigger to the entity, which the entity will call when the triggers events are raised.
            This method is threadsafe.
            </summary>
            <param name="trigger">The trigger to be registered</param>
        </member>
        <member name="M:XmasEngineModel.EntityLib.XmasEntity.Deregister(XmasEngineModel.Management.Trigger)">
            <summary>
            Deregisters a trigger from the entity, the trigger will no longer called when the triggers events are raised.
            This method is threadsafe.
            </summary>
            <param name="trigger">The trigger to be deregistered</param>
        </member>
        <member name="M:XmasEngineModel.EntityLib.XmasEntity.QueueAction(XmasEngineModel.Management.EntityXmasAction)">
            <summary>
            Queue an action meant to be performed by the entity onto the entity. This method is threadsafe.
            </summary>
            <param name="action">The action that is queued</param>
        </member>
        <member name="M:XmasEngineModel.EntityLib.XmasEntity.Raise(XmasEngineModel.Management.XmasEvent)">
            <summary>
            Raises an event on the entity, this will call all triggers with the same event that are registered to the entity
            </summary>
            <param name="evt">Event to be raised</param>
        </member>
        <member name="M:XmasEngineModel.EntityLib.XmasEntity.ConstructEventQueue">
            <summary>
            Creates a threadsafe event queue, this queue recieves all events the entity raises and stores them in a queue
            </summary>
            <returns>The ThreadSafe EventQueue</returns>
        </member>
        <member name="P:XmasEngineModel.EntityLib.XmasEntity.Position">
            <summary>
            Gets the position of the entity, this is done through the world the entity is located in.
            </summary>
        </member>
        <member name="M:XmasEngineModel.EntityLib.Agent.#ctor(System.String)">
            <summary>
                 Initializes a new instance of the Agent
            </summary>
             <param name="name"> The name of the agent, notice: this name should be unique</param>
        </member>
        <member name="P:XmasEngineModel.EntityLib.Agent.Name">
            <summary>
                 Gets the name unique to the agent, only the agent's inheritors is able to set its name.
            </summary>
        </member>
        <member name="P:XmasEngineModel.EntityLib.Agent.Percepts">
            <summary>
                 Gets the percepts of the agent by getting the percepts of each of its modules.
            </summary>
        </member>
        <member name="T:XmasEngineModel.Management.ActionManager">
            <summary>
            ActionManager controls the flow of actions being executed in the engine
            </summary>
        </member>
        <member name="M:XmasEngineModel.Management.ActionManager.#ctor(XmasEngineModel.Management.EventManager)">
            <summary>
            Instantiates a new ActionManager
            </summary>
            <param name="evtman">The eventmanager used in the same engine instantiation</param>
        </member>
        <member name="M:XmasEngineModel.Management.ActionManager.ExecuteActions">
            <summary>
            Executes all actions queued to the action manager
            </summary>
            <returns>the number of actions succesfully executed</returns>
        </member>
        <member name="M:XmasEngineModel.Management.ActionManager.Queue(XmasEngineModel.Management.EnvironmentAction)">
            <summary>
            Queues an action to the ActionManager. This method is threadsafe.
            </summary>
            <param name="action">The action to be queued.</param>
        </member>
        <member name="P:XmasEngineModel.Management.ActionManager.RunningActions">
            <summary>
            Gets all actions currently running the action manager
            </summary>
        </member>
        <member name="P:XmasEngineModel.Management.ActionManager.QueuedActions">
            <summary>
            Gets all actions queued to the action manager
            </summary>
        </member>
        <member name="T:XmasEngineModel.Management.EnvironmentAction">
            <summary>
            Action type meant to make changes that affect the entire environment, this actiontype is queued on the ActionManager
            </summary>
        </member>
        <member name="M:XmasEngineModel.Management.XmasAction.Execute">
            <summary>
            Override this method to provide the ability for the action to execute
            </summary>
        </member>
        <member name="M:XmasEngineModel.Management.XmasAction.Complete">
            <summary>
            Calling this indicates to the engine that the action has completed, this method should only be called once and only when the action is truly completed
            </summary>
        </member>
        <member name="M:XmasEngineModel.Management.XmasAction.RunAction(XmasEngineModel.Management.EnvironmentAction)">
            <summary>
            Run action as child action of this action
            </summary>
            <param name="action">action to be executed</param>
        </member>
        <member name="M:XmasEngineModel.Management.XmasAction.RunAction(XmasEngineModel.EntityLib.XmasEntity,XmasEngineModel.Management.EntityXmasAction)">
            <summary>
            Run action as child action of this action
            </summary>
            <param name="entity">entity the action is put on</param>
            <param name="action">action to be executed</param>
        </member>
        <member name="M:XmasEngineModel.Management.XmasAction.Fail">
            <summary>
            Calling this indicates to the engine that the action has failed.
            </summary>
        </member>
        <member name="P:XmasEngineModel.Management.XmasAction.ActionFailed">
            <summary>
            gets whether or not the action failed
            </summary>
        </member>
        <member name="T:XmasEngineModel.Management.EntityXmasAction`1">
            <summary>
            An abstract action meant to be queued on a specific type of entity
            </summary>
            <typeparam name="TEntity">The type of entity the action is meant to be queued onto</typeparam>
        </member>
        <member name="T:XmasEngineModel.Management.EntityXmasAction">
            <summary>
            An abstract action meant to be queued on entities
            </summary>
        </member>
        <member name="P:XmasEngineModel.Management.EntityXmasAction.Source">
            <summary>
            Gets the entity the action is executed by
            </summary>
        </member>
        <member name="P:XmasEngineModel.Management.EntityXmasAction`1.Source">
            <summary>
            Gets the entity the action is executed by
            </summary>
        </member>
        <member name="M:XmasEngineModel.Management.Actions.MultiAction.#ctor">
            <summary>
            Instantiates a MultiAction meant for running a sequence of actions
            </summary>
        </member>
        <member name="M:XmasEngineModel.Management.Actions.MultiAction.AddAction(XmasEngineModel.EntityLib.XmasEntity,XmasEngineModel.Management.EntityXmasAction)">
            <summary>
            Add an Entity action to the sequence
            </summary>
            <param name="ent">Entity the action is executed on</param>
            <param name="action">Action to be executed in the sequence</param>
        </member>
        <member name="M:XmasEngineModel.Management.Actions.MultiAction.StopMultiAction">
            <summary>
            Stops the multi action from continuing its sequence of actions
            </summary>
        </member>
        <member name="M:XmasEngineModel.Management.Actions.MultiAction.AddAction(XmasEngineModel.Management.EnvironmentAction)">
            <summary>
            Adds an environment action to the sequence
            </summary>
            <param name="action">Action to be added to the sequence</param>
        </member>
        <member name="T:XmasEngineModel.Management.EventManager">
            <summary>
            The EventManager is meant for raising events on the engine
            </summary>
        </member>
        <member name="M:XmasEngineModel.Management.EventManager.Raise(XmasEngineModel.Management.XmasEvent)">
            <summary>
            Raises an event, this triggers all triggers with the same event
            </summary>
            <param name="evt">The event raised</param>
        </member>
        <member name="M:XmasEngineModel.Management.EventManager.AddEntity(XmasEngineModel.EntityLib.XmasEntity)">
            <summary>
            Adds an entity to be part of the EventManager, so all events raised on that entity is also raised on the eventmanager
            </summary>
            <param name="xmasEntity">The entity added to the eventmanager</param>
        </member>
        <member name="M:XmasEngineModel.Management.EventManager.RemoveEntity(XmasEngineModel.EntityLib.XmasEntity)">
            <summary>
            Removes the entity from the EventManager
            </summary>
            <param name="xmasEntity">The entity to be removed</param>
        </member>
        <member name="M:XmasEngineModel.Management.EventManager.Register(XmasEngineModel.Management.Trigger)">
            <summary>
            Registers a trigger to the EventManager, once registered the trigger will be triggered each time an event is raised on the EventManager that shares an event with the trigger
            </summary>
            <param name="trigger">The trigger that is registered</param>
        </member>
        <member name="M:XmasEngineModel.Management.EventManager.Deregister(XmasEngineModel.Management.Trigger)">
            <summary>
            Deregisters a trigger from the Eventmanager so it will no longer be triggered
            </summary>
            <param name="trigger">The trigger that is deregistered from the eventmanager</param>
        </member>
        <member name="M:XmasEngineModel.Management.EventManager.ConstructEventQueue">
            <summary>
            Creates a threadsafe event queue, this queue recieves all events the EventManager raises and stores them in a queue
            </summary>
            <returns>The ThreadSafe EventQueue</returns>
        </member>
        <member name="T:XmasEngineModel.Management.XmasEvent">
            <summary>
            Extend this class to create new types of events for the engine
            </summary>
        </member>
        <member name="T:XmasEngineModel.Management.Actions.TimedAction">
            <summary>
            A timer that queues its action to the engine when it expires
            </summary>
        </member>
        <member name="M:XmasEngineModel.Management.Actions.TimedAction.#ctor(System.Action)">
            <summary>
            Instantiates a Timed Action
            </summary>
            <param name="action">The action that is queued onto the engine when the timer expires</param>
        </member>
        <member name="M:XmasEngineModel.Management.Actions.TimedAction.SetSingle(System.Double)">
            <summary>
            Starts the timer to run until the timer has expired
            </summary>
            <param name="milisec">The time in milli seconds that the timer runs for</param>
        </member>
        <member name="M:XmasEngineModel.Management.Actions.TimedAction.SetPeriodic(System.Double)">
            <summary>
            Starts the timer to run periodically, will queue an action to the engine for each time
            </summary>
            <param name="milisec">The time in milli seconds one periodic loop takes</param>
        </member>
        <member name="M:XmasEngineModel.Management.Actions.TimedAction.Stop">
            <summary>
            Stops the timer completely(does not gaurrantee the action is not queued just at the last possible moment)
            </summary>
        </member>
        <member name="T:XmasEngineModel.Management.XmasFactory">
            <summary>
            Object factory for the engine's actors to use, should be extended to allow actors to generate new kinds of objects.
            </summary>
        </member>
        <member name="M:XmasEngineModel.Management.XmasFactory.#ctor(XmasEngineModel.Management.ActionManager)">
            <summary>
            Instantiates a XmasFactory
            </summary>
            <param name="actman">The action manager used by the engine</param>
        </member>
        <member name="M:XmasEngineModel.Management.XmasFactory.CreateTimer(System.Action)">
            <summary>
            Creates a specially designed timer that queues its action to the engine when the timer has expired, thus this timer is threadsafe
            </summary>
            <param name="owner">The action that is owner of the timer</param>
            <param name="action">The action that the timer executes</param>
            <returns>The timer</returns>
        </member>
        <member name="M:XmasEngineModel.Management.XmasFactory.CreateThread(System.Action)">
            <summary>
            Creates a thread with an action that is executed when the thread is started
            </summary>
            <param name="action">The act</param>
            <returns></returns>
        </member>
        <member name="T:XmasEngineModel.Management.MultiTrigger">
            <summary>
            A trigger meant to contain multiple events, conditions and actions at a time
            </summary>
        </member>
        <member name="T:XmasEngineModel.Management.Trigger">
            <summary>
            Trigger is the most basic form of a trigger
            </summary>
        </member>
        <member name="M:XmasEngineModel.Management.Trigger.CheckCondition(XmasEngineModel.Management.XmasEvent)">
            <summary>
            Checks the condition on the trigger
            </summary>
            <param name="evt">The event that triggered the trigger</param>
            <returns>Whether or not the condition is satisfied</returns>
        </member>
        <member name="M:XmasEngineModel.Management.Trigger.Execute(XmasEngineModel.Management.XmasEvent)">
            <summary>
            Executes the action of the trigger
            </summary>
            <param name="evt">The event that triggered the trigger</param>
        </member>
        <member name="P:XmasEngineModel.Management.Trigger.Events">
            <summary>
            Gets all events on the trigger
            </summary>
        </member>
        <member name="M:XmasEngineModel.Management.MultiTrigger.RegisterEvent``1">
            <summary>
            Registers a type of event that the trigger is triggered by
            </summary>
            <typeparam name="T">The event type that triggers the trigger</typeparam>
        </member>
        <member name="M:XmasEngineModel.Management.MultiTrigger.DeregisterEvent``1">
            <summary>
            Deregisters an event from the trigger, so that the trigger is no longer triggered by that event
            </summary>
            <typeparam name="T">The event type that is deregistered</typeparam>
        </member>
        <member name="P:XmasEngineModel.Management.MultiTrigger.Events">
            <summary>
            Gets a collection of event type that the trigger is triggered by
            </summary>
        </member>
        <member name="P:XmasEngineModel.Management.MultiTrigger.Conditions">
            <summary>
            Gets all the predicates that must be satisfied for the trigger to fire
            </summary>
        </member>
        <member name="P:XmasEngineModel.Management.MultiTrigger.Actions">
            <summary>
            Gets all actions meant to be fired by the trigger
            </summary>
        </member>
        <member name="T:XmasEngineModel.Management.ThreadSafeEventManager">
            <summary>
            A Manager for managing ThreadSafeEventQueues, the manager can execute events stored on eventqueues added to it.
            </summary>
        </member>
        <member name="M:XmasEngineModel.Management.ThreadSafeEventManager.AddEventQueue(XmasEngineModel.Management.ThreadSafeEventQueue)">
            <summary>
            Adds an EventQueue to the manager, all events picked up by that queue can be fired through the manager
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:XmasEngineModel.Management.ThreadSafeEventManager.ExecuteNext">
            <summary>
            Executes the next event stored on one of the eventqueues
            </summary>
            <returns>Whether or not the execution was successful</returns>
        </member>
        <member name="M:XmasEngineModel.Management.ThreadSafeEventManager.ExecuteNextWhenReady">
            <summary>
            Freezes the thread until a new Event has been queued to one of the eventqueues, that it will proceed to execute
            </summary>
        </member>
        <member name="M:XmasEngineModel.Management.ThreadSafeEventManager.ExecuteNextWhenReady(System.TimeSpan)">
            <summary>
            Freezes the thread with a timeout until a new Event has been queued to one of the eventqueues, that it will proceed to execute
            </summary>
            <param name="ts">The timeout that says how long the thread will maximum freeze</param>
        </member>
        <member name="M:XmasEngineModel.Management.ThreadSafeEventManager.ExecuteNextWhenReady(System.TimeSpan,System.Int64@)">
            <summary>
            Freezes the thread with a timeout until a new Event has been queued to one of the eventqueues, that it will proceed to execute
            </summary>
            <param name="ts">The timeout that says how long the thread will maximum freeze</param>
            <param name="slept">The time in ticks, there are 10,000 ticks in a millisecond.</param>
        </member>
        <member name="T:XmasEngineModel.Management.ThreadSafeEventQueue">
            <summary>
            A ThreadSafe EventQueue meant to store events raises on entities and the EventManager 
            </summary>
        </member>
        <member name="M:XmasEngineModel.Management.ThreadSafeEventQueue.Register(XmasEngineModel.Management.Trigger)">
            <summary>
            Registers a trigger to the Threadsafe Eventqueue
            </summary>
            <param name="trigger">The trigger registered</param>
        </member>
        <member name="T:XmasEngineModel.Management.Trigger`1">
            <summary>
            A trigger triggered only by the TEvent
            </summary>
            <typeparam name="TEvent">The event that triggers the trigger</typeparam>
        </member>
        <member name="M:XmasEngineModel.Management.Trigger`1.#ctor(System.Action{`0})">
            <summary>
            Instantiates a trigger tied to a specific event with no condition and a single action
            </summary>
            <param name="action">The action the trigger fires</param>
        </member>
        <member name="M:XmasEngineModel.Management.Trigger`1.#ctor(System.Predicate{`0},System.Action{`0})">
            <summary>
            Instantiates a trigger tied to a specific event with a single condition and a single action
            </summary>
            <param name="condition">The condition the trigger is tied to</param>
            <param name="action">The action fire by the trigger</param>
        </member>
        <member name="M:XmasEngineModel.Management.Trigger`1.CheckCondition(XmasEngineModel.Management.XmasEvent)">
            <summary>
            Executes the condition of the trigger
            </summary>
            <param name="evt">The event of the trigger</param>
            <returns>whether or not the condition is satisfied</returns>
        </member>
        <member name="M:XmasEngineModel.Management.Trigger`1.Execute(XmasEngineModel.Management.XmasEvent)">
            <summary>
            Execute the action on the trigger
            </summary>
            <param name="evt">The event that triggered the trigger</param>
        </member>
        <member name="P:XmasEngineModel.Management.Trigger`1.Events">
            <summary>
            Returns the event the trigger is triggered by
            </summary>
        </member>
        <member name="T:XmasEngineModel.Percept">
            <summary>
            A percept meant to be percieved by agents
            </summary>
        </member>
        <member name="T:XmasEngineModel.World.EntitySpawnInformation">
            <summary>
            This class is meant to be for implementations of other worlds.
            </summary>
        </member>
        <member name="M:XmasEngineModel.World.EntitySpawnInformation.#ctor(XmasEngineModel.World.XmasPosition)">
            <summary>
            Constructor for making an EntitySpawnInformation
            </summary>
            <param name="pos">The position of the spawn</param>
        </member>
        <member name="P:XmasEngineModel.World.EntitySpawnInformation.Position">
            <summary>
            Gets where the entity is meant to spawn on
            </summary>
        </member>
        <member name="T:XmasEngineModel.World.XmasPosition">
            <summary>
            This class is meant to be extended by implementations of other positions of other worlds
            </summary>
        </member>
        <member name="M:XmasEngineModel.World.XmasPosition.GenerateSpawn">
            <summary>
            Generates a spawn from a position
            </summary>
            <returns>the spawn information</returns>
        </member>
        <member name="T:XmasEngineModel.XmasModel">
            <summary>
            The core of the engine, this is responsible for starting all other components used within the model
            </summary>
        </member>
        <member name="M:XmasEngineModel.XmasModel.Initialize">
            <summary>
            Initialization of the model of the engine
            </summary>
        </member>
        <member name="M:XmasEngineModel.XmasModel.Start">
            <summary>
            The main method of the model of the engine
            </summary>
        </member>
        <member name="M:XmasEngineModel.XmasModel.EngineCrashed(System.Exception@)">
            <summary>
            Checks if the engine has momentarily creashed
            </summary>
            <param name="exception">The exception that caused the crash</param>
            <returns>Whether or not the engine crashed</returns>
        </member>
        <member name="M:XmasEngineModel.XmasModel.AddActor(XmasEngineModel.XmasActor)">
            <summary>
            Makes an actor part of the engine, by providing it with all necessary tools
            </summary>
            <param name="actor">The actor to be made part of the engine</param>
        </member>
        <member name="T:XmasEngineModel.PerceptCollection">
            <summary>
            A collection of percepts
            </summary>
        </member>
        <member name="M:XmasEngineModel.PerceptCollection.#ctor(System.Collections.Generic.ICollection{XmasEngineModel.Percept})">
            <summary>
            Instantiates a collection of percepts
            </summary>
            <param name="percepts">A collection of percepts in form of an ICollection</param>
        </member>
        <member name="P:XmasEngineModel.PerceptCollection.Percepts">
            <summary>
            returns the percept in an ICollection
            </summary>
        </member>
        <member name="M:XmasEngineModel.Rule.Conclusion.#ctor">
            <summary>
            Instanstiates a conclusion object with no tag
            </summary>
        </member>
        <member name="M:XmasEngineModel.Rule.Conclusion.#ctor(System.Object)">
            <summary>
            Instanstiates a conclusion object with a tag
            </summary>
            <param name="tag">The object tagged to the conclusion</param>
        </member>
        <member name="P:XmasEngineModel.Rule.Conclusion.Tag">
            <summary>
            Gets or Sets the object tagged to the conclusion
            </summary>
        </member>
        <member name="T:XmasEngineModel.Rule.DontCareConclusion">
            <summary>
            A conclusion for something not mattering
            </summary>
        </member>
        <member name="T:XmasEngineModel.Rule.RuleHierarchy`2">
            <summary>
            The RuleHierarchy is a list of sets of rules, each set of rules is at a certain priority
            </summary>
            <typeparam name="TPriority">The type the priority is stored as</typeparam>
            <typeparam name="TObject">The type of object the rules are deciding over</typeparam>
        </member>
        <member name="M:XmasEngineModel.Rule.RuleHierarchy`2.AddLayer(`0,XmasEngineModel.Rule.TransformationRule{`1})">
            <summary>
            Adds a new priority layer this priority take precedence over all prior layers of priority
            </summary>
            <param name="priority">The priority object linking this layer to that priority object</param>
            <param name="ruleSet">The rule set for the new layer</param>
        </member>
        <member name="M:XmasEngineModel.Rule.RuleHierarchy`2.GetRule(`0)">
            <summary>
            Gets the rule set linked to a certain priorirt object
            </summary>
            <param name="p">The priority object</param>
            <returns>The rule set</returns>
        </member>
        <member name="M:XmasEngineModel.Rule.RuleHierarchy`2.TryGetRule(`0,XmasEngineModel.Rule.TransformationRule{`1}@)">
            <summary>
            Attempts to find a rule set through a priority object
            </summary>
            <param name="p">The priority object</param>
            <param name="rule">The ruleset that is found</param>
            <returns>Whether or not the attempt was succesful</returns>
        </member>
        <member name="M:XmasEngineModel.Rule.RuleHierarchy`2.Conclude(`1)">
            <summary>
            This causes the RuleHierarchy to go through all its layer from highest priority to lowest, and see if a layer can come to a conclusion.
            Once a layer has reached a conclusion then no other priority layers are asked. 
            If no layers can come to a conclusion then a DontCareConclusion is given.
            </summary>
            <param name="t">The object to conclude over</param>
            <returns>The conclusion</returns>
        </member>
        <member name="T:XmasEngineModel.Rule.TransformationRule`1">
            <summary>
            A set of rules that can come to one or many conclusions
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XmasEngineModel.Rule.TransformationRule`1.AddPremise(System.Predicate{`0},XmasEngineModel.Rule.Conclusion)">
            <summary>
            Links a rule to a conclusion
            </summary>
            <param name="p">The rule in form of a predicate</param>
            <param name="c">The conclusion that is reached if the predicate is true</param>
        </member>
        <member name="M:XmasEngineModel.Rule.TransformationRule`1.Conclude(`0)">
            <summary>
            Forces the ruleset to come up with a single conclusion. If multiple conclusions are reached a MultiConclusionException is thrown.
            </summary>
            <exception cref="T:XmasEngineModel.Rule.Exceptions.MultiConclusionException"></exception>
            <param name="t">The object that it concludes over</param>
            <returns>the reached conclusion</returns>
        </member>
        <member name="M:XmasEngineModel.Rule.TransformationRule`1.MultiConcluding(`0)">
            <summary>
            Makes the ruleset come up with all conclusions it can on a certain object.
            </summary>
            <param name="t">The object it is meant to conclude on</param>
            <returns>The conclusions reached</returns>
        </member>
        <member name="T:XmasEngineModel.XmasWorld">
            <summary>
            The world used in the engine, all worlds that are to be used in the engine should extend XmasWorld
            </summary>
        </member>
        <member name="M:XmasEngineModel.XmasWorld.AddEntity(XmasEngineModel.EntityLib.XmasEntity,XmasEngineModel.World.EntitySpawnInformation)">
            <summary>
            Adds an Entity to be part of the engine and the world
            </summary>
            <param name="xmasEntity">The entity added to world</param>
            <param name="info">Information regarding where and how to add the entity</param>
            <returns>whether or not the adding of the entity was successful</returns>
        </member>
        <member name="M:XmasEngineModel.XmasWorld.RemoveEntity(XmasEngineModel.EntityLib.XmasEntity)">
            <summary>
            Removes an entity from the engine
            </summary>
            <param name="entity">the entity to be removed</param>
        </member>
        <member name="M:XmasEngineModel.XmasWorld.OnAddEntity(XmasEngineModel.EntityLib.XmasEntity,XmasEngineModel.World.EntitySpawnInformation)">
            <summary>
            Override this method to intercept when a entity is added
            </summary>
            <param name="xmasEntity">The entity to be added</param>
            <param name="info">information of the entity</param>
            <returns>Whether the entity could be added</returns>
        </member>
        <member name="M:XmasEngineModel.XmasWorld.OnRemoveEntity(XmasEngineModel.EntityLib.XmasEntity)">
            <summary>
            Override this method to intercept when a entity is being removed
            </summary>
            <param name="entity">The entity that is being removed</param>
        </member>
        <member name="M:XmasEngineModel.XmasWorld.GetEntityPosition(XmasEngineModel.EntityLib.XmasEntity)">
            <summary>
            Gets the position that a entity is currently at
            </summary>
            <param name="xmasEntity">The entity which position is located</param>
            <returns>The position of the entity</returns>
        </member>
        <member name="M:XmasEngineModel.XmasWorld.SetEntityPosition(XmasEngineModel.EntityLib.XmasEntity,XmasEngineModel.World.XmasPosition)">
            <summary>
            Sets the position of an entity
            </summary>
            <param name="xmasEntity">The entity which position is being set</param>
            <param name="tilePosition">The position where the entity is set</param>
            <returns>Whether or not it could be succesfully set at that position</returns>
        </member>
        <member name="M:XmasEngineModel.XmasWorld.TryGetAgent(System.String,XmasEngineModel.EntityLib.Agent@)">
            <summary>
            Attempts to locate an agent through a certain name
            </summary>
            <param name="name">The name of the agent</param>
            <param name="agent">The agent that is being located</param>
            <returns>Whether or not the agent could be located</returns>
        </member>
        <member name="M:XmasEngineModel.XmasWorld.GetEntities(XmasEngineModel.World.XmasPosition)">
            <summary>
            Gets a collection of entities which are located at a certain position
            </summary>
            <param name="pos">The position where the entities are retrieved from</param>
            <returns>a collection of entities</returns>
        </member>
        <member name="P:XmasEngineModel.XmasWorld.EventManager">
            <summary>
            Gets or sets the EventManager of the engine
            </summary>
        </member>
        <member name="T:XmasEngineModel.XmasWorldBuilder">
            <summary>
            Uses this builder to explain how a world implementation should be constructed
            </summary>
        </member>
        <member name="M:XmasEngineModel.XmasWorldBuilder.AddEntity(XmasEngineModel.EntityLib.XmasEntity,XmasEngineModel.World.EntitySpawnInformation)">
            <summary>
            Stores information on how an entity should be added when the world is being built
            </summary>
            <param name="ent">The entity to be added</param>
            <param name="info">Information on how to add the entity</param>
        </member>
        <member name="M:XmasEngineModel.XmasWorldBuilder.ConstructWorld">
            <summary>
            Override this for explaining to the engine on how to construct the world
            </summary>
            <returns>The world the engine will use</returns>
        </member>
        <member name="M:XmasEngineModel.XmasWorldBuilder.Build(XmasEngineModel.Management.ActionManager)">
            <summary>
            Builds a full world along with all entities added to it
            </summary>
            <param name="actman">The action manager of the engine</param>
            <returns>The fully built world</returns>
        </member>
    </members>
</doc>
