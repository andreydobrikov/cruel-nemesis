<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JSLibrary</name>
    </assembly>
    <members>
        <member name="T:JSLibrary.Parallel">
            <summary>
            Class that provides minor parallel functionallity
            </summary>
        </member>
        <member name="M:JSLibrary.Parallel.Execute``1(System.Func{``0},System.Int32)">
            <summary>
            Executes a function and halts it if it execeeds its timeout
            </summary>
            <typeparam name="TResult">The result type that is being calculated by the function</typeparam>
            <param name="func">The function that does the calculation</param>
            <param name="timeout">The time out in milli seconds</param>
            <returns>The result</returns>
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="M:JSLibrary.Parallel.TryExecute``1(System.Func{``0},System.Int32,``0@)">
            <summary>
            Attempts to execute a function within a timelimit and returns whether or not this was possible
            </summary>
            <typeparam name="TResult">The result type that is being calculated by the function</typeparam>
            <param name="func">The function that does the calculation</param>
            <param name="timeout">The time out in milli seconds</param>
            <param name="result">The result being calculated</param>
            <returns>Whether or not the execution was within the timelimit</returns>
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="M:JSLibrary.Parallel.ExecuteWithPollingCheck(System.Action,System.Double,System.Func{System.Boolean})">
            <summary>
            Executes an action, on set timer interval a condition must be satisfied or the execution of thread is halted
            </summary>
            <param name="action">The action being executed</param>
            <param name="intervalMiliSec">The time between the condition checks</param>
            <param name="ThreadAbortCondition">The condition for aborting the thread, if satisfied the thread is stopped</param>
        </member>
        <member name="M:JSLibrary.ExtendedString.ToStream(System.String)">
            <summary>
            Converts a string to a stream
            </summary>
            <param name="str">The string to be converted</param>
            <returns></returns>
        </member>
        <member name="M:JSLibrary.Generics.InstantiateGenericClass(System.Type,System.Type[],System.Object[])">
            <summary>
            Instantiates a generic class, such as GenericClass&lt;A,B,C&gt;
            </summary>
            <param name="generic">type of the generic class</param>
            <param name="subtypes">the subtypes such as the A, B and C</param>
            <param name="constructorInput">Input given to the constructor of the class</param>
        </member>
        <member name="T:JSLibrary.Network.PacketStream">
            <summary>
            A stream designed specially for sending and recieving data in forms of packages
            </summary>
        </member>
        <member name="M:JSLibrary.Network.PacketStream.ReadNextPackage">
            <summary>
            Causes the stream to read the next package on the stream
            </summary>
        </member>
        <member name="M:JSLibrary.Network.PacketStream.Flush">
            <summary>
            causes the stream to send out the data stored as a package
            </summary>
        </member>
    </members>
</doc>
